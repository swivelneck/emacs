#+title: Emacs Overview
#+author: Allan Neil
#+creator: Allan Neil
#+date: <2025-04-06 Sun>
#+language: English


* Emacs overview
** Purpose
I love Emacs!  However problems arise when I have been away from it for too long and I forget how to use it or when I upgrade my computer and am forced to relearn how to install and set it up again.

The purpose of this repository and set of documents is to provide a documented reminder of:
+ Which Emacs packages I use
+ How to install Emacs
+ How to install additional Emacs packages used
+ High level how-to instructions for using Emacs and packages

** Why bother?
Configuring Emacs is not for the feint of heart.  It fits into a class of problems which could be called non-trivial.
So why bother?
Why not just use VS Code or any number of easier to install and use alternatives?

Fair questions.  The answer is simply that Emacs is addictive once you get used to it, which admittedly can take a long time.

One measure of a good tool of any kind is to what extent does the distinction between user and tool disappear while they are using it.  My experience has been that over time Emacs usage gets so intuitively embedded into the muscle memory of my fingers as to seem part of me.

* Reference Emacs Environment Snapshot
Below is a snapshot of my environment..
+ Macbook Pro laptop 16 inch 2023, M2 Max chipset
+ Mac OS Sequoia 15.3.2
+ iTerm2 terminal
  + ZSH Oh My Zsh with powerlevel10k theme
+ Emacs version 29.1
+ Doom Emacs version 3.0

* Installing Doom Emacs and Dependencies:
Doom Emacs has an excellent Getting Started Guide which can be used for this:
https://github.com/doomemacs/doomemacs/blob/master/docs/getting_started.org

** Installing Doom Dependencies
+ ripgrep
+ coreutills fd (optional find )
+ Xcode (recommended if using Emacs for dev)
See https://github.com/doomemacs/doomemacs/blob/master/docs/getting_started.org#with-homebrew for installation instructions using Homebrew.

** Installing Emacs
The Doom Getting Started Guide recommends emacs-mac first, emacs-plus second, and thirdly just emacs.
See https://github.com/doomemacs/doomemacs/blob/master/docs/getting_started.org#with-homebrew instructions,
For Mac either Homebrew or MacPorts can be used.  I prefer Homebrew.
I follow the instructions for the first recommendation, emacs-mac.

** Installing Doom
After installing the dependencies and Emacs itself, finally Doom can be installed, again following the Getting Started Guide as linked above.
        git clone https://github.com/hlissner/doom-emacs ~/.emacs.d
        ~/.emacs.d/bin/doom install

* Configuration of Doom Emacs
** Setting $PATH
Since I am using ZSH shell, the hidden .ZSHRC file is edited to include both the Emacs bin and Doom paths as follows:
+ Emacs - export PATH="/opt/homebrew/Cellar/emacs-mac/emacs-29.1-mac-10.0/Emacs.app/Contents/MacOS:$PATH"
+ Doom - export PATH="$HOME/.emacs.d/bin:$PATH"

** Doom command - very important
There is a doom CLI tool which is used to install, update and maintain doom.
Full explanation of this command and it's options can be found here: https://github.com/doomemacs/doomemacs/blob/master/docs/getting_started.org#the-bindoom-utility
Excerpted here for reference (quote)
+ *doom sync*: This synchronizes your config with Doom Emacs. It ensures that needed packages are installed, orphaned packages are removed and necessary metadata correctly generated. Run this whenever you modify your doom! block or packages.el file. You’ll need doom sync -u if you override the recipe of package installed by another module.
+ *doom upgrade*: Updates Doom Emacs (if available) and all its packages.
+ *doom env*: (Re)generates an “envvar file”, which is a snapshot of your shell environment that Doom loads at startup. If your app launcher or OS launches Emacs in the wrong environment you will need this. **This is required for GUI Emacs users on MacOS.**
+ *doom doctor*: If Doom misbehaves, the doc will diagnose common issues with your installation, system and environment.
+ *doom purge*: Over time, the repositories for Doom’s plugins will accumulate. Run this command from time to time to delete old, orphaned packages, and with the -g switch to compact existing package repos.
  (unquote)

  It's a good idea to run both "Doom Sync" and "Doom Doctor" after installation to confirm everything is working correctly.

** Configuring Github and Magit
Magit is and included package with Doom and is an awesome interface to Git.

*** Configuring Github
Magit will require access to Github.  I use an SSH key for this.
Instructions for this set up can be found here: https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account

*** Configuring Magit in Doom Emacs
After setting up SSH access to Github, setting up Magit should be straight forward.

Pressing Cmd-X will bring up the M-x prompt where there are 3 magit commands as follows:
+ *magit-remote-add* to add a remote (github)
+ *magit-remote-configure* to configure an existing remote (github)
+ *magit-remote-remove* to remove an existing remote (github)

*** Configuring PlantUML in Doom Emacs
There are a number of different packages available for Emacs.  Even though the resulting diagrams have a kind of "old school" look to them, the package I prefer to use is PlantUML due to its' maturity and breadth of diagram types.
There are 3 key steps to configuring PlantUML in Doom Emacs.
**** Installing Java
The PlantUML package requires the Java run-time.
brew install openjdk@23 will install version 23 of Java.
**** Enabling the package in the Doom Emacs
There are 3 configuration files which are used to customize Doom Emacs which are located in the ".doom.d" subdirectory which will be located under home directory.
Tip: Use Shift+Command+. to show hidden files
+ Init.el for intitialization options
+ Config.el for configuration
+ Packages. el for packages

PlantUML is enabled by uncommenting (removing the ;; characters in from  of ) plantuml in the init.el file.
This basically tells Doom Emacs to load that package at startup.
**** Downloading the PlantJAR
In Doom Emacs, press Command-X and enter PlantUML to see a list of available PlantUML commands.
Select command plantuml-download-jar to download the JAR (java archive) for PlantUML

*** Configuring GPTel for AI LLM integration
GPTel is a great package for integration Emacs with AI LLM models.
See https://github.com/karthink/gptel for an overview of this package.
GPTel can be configured to work with a long list of LLM's.  These configuration instructions will focus on ChatGPT but the above link can be used for instructions for other models as needed.

**** Packages.el
Edit packages.el and add the following line:
(package! gptel :recipe (:nonrecursive t))

**** Config.el
Edit config.el and add the following:
(use-package! gptel
 :config
 (setq! gptel-api-key "your key"))

 Note that the ChatGPT api key is required.
 For security purposes, especially if the config.el file will be put on Github for version control, the API key can be provided by via "authinfo".
 Details for this can be found here https://github.com/karthink/gptel?tab=readme-ov-file#optional-securing-api-keys-with-authinfo
